#pragma once

#include <alut.h>
#include <stdio.h>
#include <windows.h>
#include <thread>

#include "mpg123/mpg123.h"
#include <conio.h>

#include <map>
#include <vector>

#pragma comment (lib, "./mpg123/libmpg123.lib")
#pragma comment (lib, "./openal/lib/OpenAL32.lib")
#pragma comment (lib, "./openal/lib/alut.lib")

//multimapï¿½Ä¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ø¸ï¿½


//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½à£¬Ä¿Ç°ï¿½ï¿½Ö§ï¿½ï¿½wav

class Clip{
public:
	Clip(char* fileName);
	~Clip();
	void append();
	void play();

	void playMP3(bool* running);

private:
	char* fileName;
	std::vector<ALuint> sources;
	unsigned short type;
	bool isPlaying;

	ALenum alError;
};

typedef std::map<unsigned int,Clip*> ClipMap; 

class DSSoundManager
{
public:
	static DSSoundManager* getSoundManager();

	DSSoundManager(void);
	~DSSoundManager(void);
	//ï¿½ï¿½ï¿½Ä¼ï¿½ï¿½Ðµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½nï¿½ï¿½Ê¾ï¿½ï¿½Òªnï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô´ï¿½Ô±ï¿½Ê¹ï¿½ï¿½,ï¿½ï¿½ï¿½Øµï¿½Ò»ï¿½ï¿½sourceï¿½ï¿½Index
	void addSound(unsigned int id, char* fileName);
	//ï¿½ï¿½ï¿½ï¿½Ö¸ï¿½ï¿½IDï¿½ï¿½Ô´ï¿½ï¿½ï¿½ï¿½Ó¦Ö¸ï¿½ï¿½Ô´ï¿½ï¿½Î»ï¿½Ãºï¿½ï¿½Ù¶ï¿½
	//idÓ¦Îªï¿½ï¿½ï¿½ï¿½ï¿½ßµï¿½ï¿½ï¿½ï¿½Íºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Íµï¿½ï¿½ï¿½ï¿?
	void playSound(unsigned int id);
	//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æµ,ï¿½ï¿½ï¿½å°´Ê²Ã´ï¿½ï¿½ï¿½Ø´ï¿½ï¿½ï¿½
	void loadSounds();
	
	void setListenerPosition(ALfloat x, ALfloat y, ALfloat z=8.f);
	//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	static void displayALError(char* func,ALenum alError);

	

private:
	static DSSoundManager *sm;

	ALCdevice *device;
	ALCcontext *context;
	
	mpg123_handle *mpg123 ;

	ClipMap clipMap;

	ALuint backgroundSound;

	ALboolean g_bEAX;
	ALenum alError;
	int iMpg123_error;
};

